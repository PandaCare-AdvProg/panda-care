package id.ac.ui.cs.advprog.pandacare.model;

import id.ac.ui.cs.advprog.pandacare.enums.Role;
import id.ac.ui.cs.advprog.pandacare.observer.ChatObserver;
import org.junit.jupiter.api.*;
import java.time.LocalDateTime;
import static org.junit.jupiter.api.Assertions.*;


class ChatMessageTest {

    private ChatMessage chatMessage;
    private ChatRoom chatRoom;
    private LocalDateTime testTimestamp;

    @BeforeEach
    void setUp() {
        testTimestamp = LocalDateTime.now();
        chatRoom = new ChatRoom();
        chatRoom.setRoomId("room-123");
        
        chatMessage = new ChatMessage(
            "user1", 
            "user2", 
            "Hello there!", 
            testTimestamp, 
            chatRoom
        );
    }

    @Test
    void testChatMessageCreation() {
        assertNotNull(chatMessage);
        assertEquals("user1", chatMessage.getSender());
        assertEquals("user2", chatMessage.getReceiver());
        assertEquals("Hello there!", chatMessage.getContent());
        assertEquals(testTimestamp, chatMessage.getTimestamp());
        assertFalse(chatMessage.isEdited());
        assertFalse(chatMessage.isDeleted());
        assertEquals(chatRoom, chatMessage.getChatRoom());
    }

    @Test
    void testDefaultValues() {
        ChatMessage defaultMessage = new ChatMessage();
        assertNull(defaultMessage.getId());
        assertNull(defaultMessage.getSender());
        assertNull(defaultMessage.getReceiver());
        assertNull(defaultMessage.getContent());
        assertNull(defaultMessage.getTimestamp());
        assertFalse(defaultMessage.isEdited());
        assertFalse(defaultMessage.isDeleted());
        assertNull(defaultMessage.getChatRoom());
    }

    @Test
    void testIdGeneration() {
        assertNull(chatMessage.getId());
        // In a real scenario, the ID would be generated by JPA
    }

    @Test
    void testSetterMethods() {
        chatMessage.setId("msg-123");
        assertEquals("msg-123", chatMessage.getId());
        
        chatMessage.setSender("newSender");
        assertEquals("newSender", chatMessage.getSender());
        
        chatMessage.setReceiver("newReceiver");
        assertEquals("newReceiver", chatMessage.getReceiver());
        
        chatMessage.setContent("Updated content");
        assertEquals("Updated content", chatMessage.getContent());
        
        LocalDateTime newTime = LocalDateTime.now().plusHours(1);
        chatMessage.setTimestamp(newTime);
        assertEquals(newTime, chatMessage.getTimestamp());
        
        chatMessage.setEdited(true);
        assertTrue(chatMessage.isEdited());
        
        chatMessage.setDeleted(true);
        assertTrue(chatMessage.isDeleted());
        
        ChatRoom newRoom = new ChatRoom();
        newRoom.setRoomId("new-room");
        chatMessage.setChatRoom(newRoom);
        assertEquals(newRoom, chatMessage.getChatRoom());
    }

    @Test
    void testAllArgsConstructor() {
        ChatMessage newMessage = new ChatMessage(
            "sender1", 
            "receiver1", 
            "Test content", 
            testTimestamp, 
            chatRoom
        );
        
        assertEquals("sender1", newMessage.getSender());
        assertEquals("receiver1", newMessage.getReceiver());
        assertEquals("Test content", newMessage.getContent());
        assertEquals(testTimestamp, newMessage.getTimestamp());
        assertEquals(chatRoom, newMessage.getChatRoom());
        assertFalse(newMessage.isEdited());
        assertFalse(newMessage.isDeleted());
    }

    @Test
    void testToString() {
        // Lombok's @ToString is included by default
        assertNotNull(chatMessage.toString());
        assertTrue(chatMessage.toString().contains("ChatMessage"));
    }

}  
